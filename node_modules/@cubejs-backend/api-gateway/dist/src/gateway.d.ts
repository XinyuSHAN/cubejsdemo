export class ApiGateway {
    constructor(apiSecret: any, compilerApi: any, adapterApi: any, logger: any, options: any);
    apiSecret: any;
    compilerApi: any;
    adapterApi: any;
    refreshScheduler: any;
    logger: any;
    basePath: any;
    queryTransformer: any;
    subscriptionStore: any;
    enforceSecurityChecks: any;
    extendContext: any;
    initializeMiddleware(options: any): void;
    checkAuthFn: any;
    requestMiddleware: any[] | undefined;
    initApp(app: any): void;
    initSubscriptionServer(sendMessage: any): SubscriptionServer;
    duration(requestStarted: any): any;
    runScheduledRefresh({ context, res, queryingOptions }: {
        context: any;
        res: any;
        queryingOptions: any;
    }): Promise<void>;
    meta({ context, res }: {
        context: any;
        res: any;
    }): Promise<void>;
    getNormalizedQueries(query: any, context: any): Promise<(string | any[])[]>;
    sql({ query, context, res }: {
        query: any;
        context: any;
        res: any;
    }): Promise<void>;
    dryRun({ query, context, res }: {
        query: any;
        context: any;
        res: any;
    }): Promise<void>;
    load({ query, context, res, ...props }: {
        [x: string]: any;
        query: any;
        context: any;
        res: any;
    }): Promise<void>;
    subscribe({ query, context, res, subscribe, subscriptionState, queryType }: {
        query: any;
        context: any;
        res: any;
        subscribe: any;
        subscriptionState: any;
        queryType: any;
    }): Promise<void>;
    resToResultFn(res: any): (message: any, { status }?: {
        status: any;
    }) => any;
    parseQueryParam(query: any): any;
    getCompilerApi(context: any): any;
    getAdapterApi(context: any): any;
    contextByReq(req: any, authInfo: any, requestId: any): Promise<any>;
    requestIdByReq(req: any): any;
    handleError({ e, context, query, res, requestStarted }: {
        e: any;
        context: any;
        query: any;
        res: any;
        requestStarted: any;
    }): void;
    defaultCheckAuth(req: any, auth: any): Promise<void>;
    checkAuth(req: any, res: any, next: any): Promise<void>;
    requestContextMiddleware(req: any, res: any, next: any): Promise<void>;
    requestLogger(req: any, res: any, next: any): Promise<void>;
    compareDateRangeTransformer(query: any): any;
    log(context: any, event: any): void;
}
import { SubscriptionServer } from "./SubscriptionServer";
//# sourceMappingURL=gateway.d.ts.map