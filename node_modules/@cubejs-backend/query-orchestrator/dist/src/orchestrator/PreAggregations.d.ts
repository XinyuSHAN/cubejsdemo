export class PreAggregations {
    static preAggregationQueryCacheKey(preAggregation: any): any;
    static targetTableName(versionEntry: any): string;
    constructor(redisPrefix: any, clientFactory: any, logger: any, queryCache: any, options: any);
    options: any;
    redisPrefix: any;
    driverFactory: any;
    logger: any;
    queryCache: any;
    cacheDriver: LocalCacheDriver | RedisCacheDriver;
    externalDriverFactory: any;
    structureVersionPersistTime: any;
    usedTablePersistTime: any;
    externalRefresh: any;
    tablesUsedRedisKey(tableName: any): string;
    addTableUsed(tableName: any): Promise<any>;
    tablesUsed(): Promise<any>;
    loadAllPreAggregationsIfNeeded(queryBody: any): any;
    getQueue(): import("./QueryQueue").QueryQueue;
    queue: import("./QueryQueue").QueryQueue;
    getLoadCacheQueue(): import("./QueryQueue").QueryQueue;
    loadCacheQueue: import("./QueryQueue").QueryQueue;
}
import { LocalCacheDriver } from "./LocalCacheDriver";
import { RedisCacheDriver } from "./RedisCacheDriver";
//# sourceMappingURL=PreAggregations.d.ts.map