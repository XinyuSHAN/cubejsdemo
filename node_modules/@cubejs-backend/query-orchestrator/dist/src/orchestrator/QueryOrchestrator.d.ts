export class QueryOrchestrator {
    constructor(redisPrefix: any, driverFactory: any, logger: any, options: any);
    redisPrefix: any;
    driverFactory: any;
    logger: any;
    redisPool: RedisPool;
    queryCache: QueryCache;
    preAggregations: PreAggregations;
    rollupOnlyMode: any;
    fetchQuery(queryBody: any): Promise<any>;
    queryStage(queryBody: any): Promise<{
        stage: string;
        timeElapsed: number;
    } | {
        stage: string;
        timeElapsed?: undefined;
    }>;
    resultFromCacheIfExists(queryBody: any): Promise<{
        data: any;
        lastRefreshTime: Date;
    }>;
    cleanup(): Promise<void>;
}
import { RedisPool } from "./RedisPool";
import { QueryCache } from "./QueryCache";
import { PreAggregations } from "./PreAggregations";
//# sourceMappingURL=QueryOrchestrator.d.ts.map