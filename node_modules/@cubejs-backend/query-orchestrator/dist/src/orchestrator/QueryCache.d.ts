export class QueryCache {
    static queryCacheKey(queryBody: any): any[];
    static replaceAll(replaceThis: any, withThis: any, inThis: any): any;
    static replacePreAggregationTableNames(queryAndParams: any, preAggregationsTablesToTempTables: any): any;
    static createQueue(redisPrefix: any, clientFactory: any, executeFn: any, options: any): QueryQueue;
    constructor(redisPrefix: any, clientFactory: any, logger: any, options: any);
    options: any;
    redisPrefix: any;
    driverFactory: any;
    externalDriverFactory: any;
    logger: any;
    cacheDriver: LocalCacheDriver | RedisCacheDriver;
    cachedQueryResult(queryBody: any, preAggregationsTablesToTempTables: any): Promise<{
        data: any;
        refreshKeyValues: any[] | [any, any, any, any, any, any, any, any, any, any];
        lastRefreshTime: Date;
    } | {
        data: any;
        lastRefreshTime?: undefined;
    } | {
        data: any;
        lastRefreshTime: Date;
    }>;
    queryWithRetryAndRelease(query: any, values: any, { priority, cacheKey, external, requestId }: {
        priority: any;
        cacheKey: any;
        external: any;
        requestId: any;
    }): Promise<any>;
    getQueue(): QueryQueue;
    queue: QueryQueue;
    getExternalQueue(): QueryQueue;
    externalQueue: QueryQueue;
    startRenewCycle(query: any, values: any, cacheKeyQueries: any, expireSecs: any, cacheKey: any, renewalThreshold: any, options: any): void;
    renewQuery(query: any, values: any, cacheKeyQueries: any, expireSecs: any, cacheKey: any, renewalThreshold: any, options: any): Promise<{
        data: any;
        refreshKeyValues: any[] | [any, any, any, any, any, any, any, any, any, any];
        lastRefreshTime: Date;
    }>;
    cacheQueryResult(query: any, values: any, cacheKey: any, expiration: any, options: any): Promise<any>;
    lastRefreshTime(cacheKey: any): Promise<Date>;
    resultFromCacheIfExists(queryBody: any): Promise<{
        data: any;
        lastRefreshTime: Date;
    }>;
    queryRedisKey(cacheKey: any): string;
}
import { LocalCacheDriver } from "./LocalCacheDriver";
import { RedisCacheDriver } from "./RedisCacheDriver";
import { QueryQueue } from "./QueryQueue";
//# sourceMappingURL=QueryCache.d.ts.map