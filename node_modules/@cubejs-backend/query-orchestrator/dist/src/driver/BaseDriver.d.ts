export class BaseDriver {
    informationSchemaQuery(): string;
    getSslOptions(): {};
    testConnection(): void;
    query(query: any, values: any): void;
    downloadQueryResults(query: any, values: any): Promise<{
        rows: void;
        types: {
            name: string;
            type: string;
        }[];
    }>;
    readOnly(): boolean;
    tablesSchema(): any;
    createSchemaIfNotExists(schemaName: any): any;
    getTablesQuery(schemaName: any): void;
    loadPreAggregationIntoTable(preAggregationTableName: any, loadSql: any, params: any, options: any): void;
    dropTable(tableName: any, options: any): void;
    param(): string;
    testConnectionTimeout(): number;
    downloadTable(table: any): Promise<{
        rows: void;
    }>;
    uploadTable(table: any, columns: any, tableData: any): Promise<void>;
    uploadTableWithIndexes(table: any, columns: any, tableData: any, indexesSql: any): Promise<void>;
    toColumnValue(value: any, genericType: any): any;
    tableColumnTypes(table: any): Promise<any>;
    createTable(quotedTableName: any, columns: any): any;
    createTableSql(quotedTableName: any, columns: any): string;
    toGenericType(columnType: any): any;
    fromGenericType(columnType: any): any;
    quoteIdentifier(identifier: any): string;
    cancelCombinator(fn: any): any;
    setLogger(logger: any): void;
    logger: any;
    reportQueryUsage(usage: any, queryOptions: any): void;
}
//# sourceMappingURL=BaseDriver.d.ts.map